# In gmail_finder.py
import imaplib
import email
from langflow.custom import Component
from langflow.io import StrInput, SecretStrInput, Output
from langflow.schema import Data
from typing import List # Import List for type hinting

class GmailPdfFinder(Component):
    display_name = "Gmail PDF Finder"
    description = "Connects to Gmail and finds unread emails with PDF attachments, outputting a list of Data objects."
    icon = "Gmail"

    inputs = [
        StrInput(name="email_address", display_name="Your Gmail Address", required=True),
        SecretStrInput(name="app_password", display_name="Google App Password", required=True),
    ]
    
    outputs = [
        Output(display_name="Emails with PDFs", name="emails_data", method="find_emails"),
    ]

    # The method now returns a List of Data objects
    def find_emails(self) -> List[Data]:
        email_addr = self.email_address
        app_pwd = self.app_password
        # This list will hold the raw email dictionaries
        found_emails_dicts = []
        log_messages = []

        try:
            imap = imaplib.IMAP4_SSL("imap.gmail.com")
            imap.login(email_addr, app_pwd.replace(" ", ""))
            imap.select("INBOX")
            log_messages.append("Connected to Gmail.")

            status, email_ids = imap.search(None, '(UNSEEN)')
            email_id_list = email_ids[0].split()
            log_messages.append(f"Found {len(email_id_list)} unread emails.")
            #print(f"[DEBUG] Adding email_id: {email_id.decode()}")

            for email_id in email_id_list:
                has_pdf = False
                status, msg_data = imap.fetch(email_id, '(RFC822)')
                raw_email_bytes = msg_data[0][1]
                msg = email.message_from_bytes(raw_email_bytes)

                for part in msg.walk():
                    if part.get_filename() and part.get_filename().lower().endswith('.pdf'):
                        has_pdf = True
                        break
                
                if has_pdf:
                    log_messages.append(f"Found PDF in email with ID {email_id.decode()}.")
                    found_emails_dicts.append({"email_id": email_id.decode(), "raw_email": raw_email_bytes})
                    imap.store(email_id, '+FLAGS', '\\Seen')

            imap.close()
            imap.logout()
        except Exception as e:
            log_messages.append(f"Error: {e}")
            self.status = log_messages
            return [] # Return an empty list on error

        self.status = log_messages
        
        # --- KEY CHANGE: Transform the list of dictionaries into a list of Data objects ---
        # This uses a list comprehension to create the exact format the Loop component needs.
        output_list = [Data(data=email_dict) for email_dict in found_emails_dicts]
        
        return output_list