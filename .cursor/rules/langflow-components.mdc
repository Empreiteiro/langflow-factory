# Langflow Component Development Rules

## Component Structure Requirements

### Class Definition
```python
from langflow.custom import Component
from langflow.io import StrInput, BoolInput, FileInput
from langflow.schema import Data, Message, DataFrame

class ComponentName(Component):
    display_name = "User Friendly Name"
    description = "Clear, concise component description"
    icon = "lucide-icon-name"  # Use Lucide icons only
    name = "ComponentName"
    version = "1.0.0"
```

### Input Patterns
- Use `StrInput` for text, `BoolInput` for toggles, `FileInput` for files
- Set `real_time_refresh=True` for fields that should trigger UI updates
- Use `dynamic=True` and `show=False` for conditional fields
- Always set `required=True` for mandatory inputs
- Use `multiline=True` for text areas, `password=True` for secrets

### Output Requirements
- Always return `Data`, `Message`, or `DataFrame` objects
- Use `Message` only for chat/text content with sender info
- Use `DataFrame` for tabular data
- Use `Data` for all other structured data
- Define outputs with clear `display_name` and matching `method` names

## Logging and Error Handling

### Logging Rules
- ALWAYS use `self.log()` instead of Python's logging module
- Log errors before raising exceptions: `self.log(f"Error: {str(e)}")`
- Log important processing steps for debugging
- Use descriptive log messages with context

### Error Handling Pattern
```python
def process_method(self) -> Data:
    try:
        # Validate inputs first
        self.validate_inputs()
        
        # Process data
        result = self.execute_logic()
        
        return Data(data={"result": result})
    except Exception as e:
        self.log(f"Component failed: {str(e)}")
        return Data(data={"error": str(e)})
```

## Input Validation Requirements

### Validation Method
```python
def validate_inputs(self) -> None:
    """Validate all component inputs before processing"""
    if not self.required_field:
        raise ValueError("Required field is missing")
    
    if hasattr(self, 'timeout') and self.timeout <= 0:
        raise ValueError("Timeout must be positive")
```

## Dynamic Fields Implementation

### Real-time Refresh Pattern
```python
# In inputs list
BoolInput(
    name="advanced_mode",
    display_name="Advanced Mode", 
    real_time_refresh=True
),
StrInput(
    name="advanced_option",
    display_name="Advanced Option",
    dynamic=True,
    show=False
)

# Update method
def update_build_config(self, build_config: dict, field_value: any, field_name: str) -> dict:
    if field_name == "advanced_mode":
        build_config["advanced_option"]["show"] = field_value
    return build_config
```

## File Processing Rules

### File Path Handling
- Use `resolve_path()` method for file path resolution
- Support multiple file formats when applicable
- Handle encoding detection for text files
- Follow USER_ID/FILE_ID.FILE_EXTENSION format for output paths

### File Processing Pattern
```python
def process_files(self) -> DataFrame:
    try:
        resolved_files = self.resolve_path()
        results = []
        
        for file_obj in resolved_files:
            # Process each file
            processed_data = self.process_single_file(file_obj)
            results.append(Data(data=processed_data))
        
        return DataFrame(results)
    except Exception as e:
        self.log(f"File processing failed: {str(e)}")
        return DataFrame([Data(data={"error": str(e)})])
```

## API Integration Standards

### Authentication
- Store API keys in `SecretStrInput` fields
- Validate credentials before making requests
- Handle authentication failures gracefully
- Implement proper credential management

### Request Handling
- Implement exponential backoff for rate limiting
- Handle pagination when needed
- Parse API responses consistently
- Log API usage for debugging
- Return structured error responses for failed calls

### HTTP Client Pattern
```python
def make_api_request(self, endpoint: str, data: dict) -> dict:
    try:
        response = requests.post(
            endpoint,
            json=data,
            headers={"Authorization": f"Bearer {self.api_key}"},
            timeout=self.timeout
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        self.log(f"API request failed: {str(e)}")
        raise
```

## Component Organization

### Naming Conventions
- Use PascalCase for class names
- Use snake_case for method and variable names
- Use clear, descriptive names for inputs/outputs
- Prefix private methods with underscore

### Code Structure
- Keep components focused on single responsibility
- Extract reusable logic into separate methods
- Group related inputs together
- Document complex logic with inline comments
- Use type hints for all parameters and returns

## Testing Requirements

### Component Testing
- Create test files in `/tests` directory
- Test both success and failure scenarios  
- Mock external API calls
- Validate component outputs
- Test dynamic field behavior
- Include edge case testing

## DataFrame Output Patterns

### Correct DataFrame Return Pattern
- ALWAYS use `DataFrame(pd.DataFrame(data))` wrapper for tabular data
- DO NOT set `self.status` when returning DataFrames - it interferes with display
- Log DataFrame info before returning for debugging
- Return error DataFrames for failures: `DataFrame(pd.DataFrame({"error": [error_msg]}))`

### Working DataFrame Pattern
```python
def search_method(self) -> DataFrame:
    try:
        # Process data
        results = []
        for item in data:
            results.append({
                "column1": item.value1,
                "column2": item.value2
            })
        
        # Create DataFrame and log info
        df = pd.DataFrame(results)
        self.log(f"Returning DataFrame with {len(df)} rows and columns: {list(df.columns)}")
        return DataFrame(df)
        
    except Exception as e:
        self.log(f"Error: {str(e)}")
        return DataFrame(pd.DataFrame({"error": [str(e)]}))
```

### DataFrame Display Issues
- If DataFrame shows only status message but no data, check return pattern
- Ensure proper indentation in loops when appending results
- DO NOT mix `self.status` setting with DataFrame returns
- Use logging instead of status for debugging DataFrame issues

## Performance Guidelines

### Optimization Rules
- Process multiple files in batch when possible
- Use efficient data structures for large datasets
- Implement progress tracking for long operations
- Cache results when appropriate
- Minimize memory usage for large file processing

### Resource Management
- Close file handles properly
- Clean up temporary files
- Handle memory-intensive operations carefully
- Use generators for large data processing
